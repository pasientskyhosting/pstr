apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    application: "{{.Application_name}}-{{.Deploy.Name}}"
    build: "{{.Build_id}}"
    type: "{{.Deploy.Type}}"
    bamboo_deploy_release: "{{.Bamboo_deploy_release}}"
  name: "{{.Deploy_name}}"
  namespace: "{{.Namespace}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      application: "{{.Application_name}}-{{.Deploy.Name}}"
      build: "{{.Build_id}}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        application: "{{.Application_name}}-{{.Deploy.Name}}"
        build: "{{.Build_id}}"
        type: "{{.Deploy.Type}}"
        bamboo_deploy_release: "{{.Bamboo_deploy_release}}"
    spec:
      imagePullSecrets:
      - name: nexus
      containers:
      - image: "{{.Deploy.ImageName}}"
        imagePullPolicy: Always
        name: "{{.Deploy_name}}"
        {{if .Deploy.PreStop.HTTPGet.Path -}}lifecycle:
          preStop:
            httpGet:
              path: "{{.Deploy.PreStop.HTTPGet.Path}}"
              port: {{.Deploy.PreStop.HTTPGet.Port}}
        {{else if .Deploy.PreStop.Exec.Command}}lifecycle:
          preStop:
            exec:
              command: [{{ range $index,$cmd := .Deploy.PreStop.Exec.Command}}{{if $index}},"{{$cmd}}"{{else}}"{{$cmd}}"{{end}}{{end}}]{{end}}
        readinessProbe:
          {{if .Deploy.Readiness.Path -}}httpGet:
            path: {{.Deploy.Readiness.Path}}
            port: {{if .Deploy.Readiness.Port}}{{.Deploy.Readiness.Port}}{{else}}80{{end}}
            scheme: HTTP
          {{else if .Deploy.Readiness.Exec.Command}}exec:
            command: [{{ range $index,$cmd := .Deploy.Readiness.Exec.Command}}{{if $index}},"{{$cmd}}"{{else}}"{{$cmd}}"{{end}}{{end}}]{{end}}
          initialDelaySeconds: {{.Deploy.Readiness.InitialDelaySeconds}}
          periodSeconds: {{.Deploy.Readiness.PeriodSeconds}}
          failureThreshold: {{.Deploy.Readiness.FailureThreshold}}
          timeoutSeconds: {{.Deploy.Readiness.TimeoutSeconds}}
          successThreshold: {{.Deploy.Readiness.SuccessThreshold}}
        livenessProbe:
          {{if .Deploy.Health.Path -}}httpGet:
            path: {{.Deploy.Health.Path}}
            port: {{if .Deploy.Health.Port}}{{.Deploy.Health.Port}}{{else}}80{{end}}
            scheme: HTTP
          {{else if .Deploy.Health.Exec.Command}}exec:
            command: [{{ range $index,$cmd := .Deploy.Health.Exec.Command}}{{if $index}},"{{$cmd}}"{{else}}"{{$cmd}}"{{end}}{{end}}]{{end}}
          initialDelaySeconds: {{.Deploy.Health.InitialDelaySeconds}}
          periodSeconds: {{.Deploy.Health.PeriodSeconds}}
          failureThreshold: {{.Deploy.Health.FailureThreshold}}
          timeoutSeconds: {{.Deploy.Readiness.TimeoutSeconds}}
          successThreshold: 1
        env:
          - name: PS_CONSUL_FULL_URL
            value: "{{.CONSUL_FULL_URL}}"
          - name: PS_CONSUL_URL
            value: "{{.CONSUL_URL}}"
          - name: PS_CONSUL_USERNAME
            value: "{{.CONSUL_USERNAME}}"
          - name: PS_CONSUL_PASSWORD
            value: "{{.CONSUL_PASSWORD}}"
          - name: PS_APPLICATION
            value: "{{.CONSUL_APPLICATION}}"
          - name: PS_ENVIRONMENT
            value: "{{.CONSUL_ENVIRONMENT}}"
          - name: PS_BUILD_ID
            value: "{{.Build_id}}"
          - name: PS_BUILD_NR
            value: "{{.Build_nr}}"
          - name: NEW_RELIC_LICENSE_KEY
            value: "{{.NEW_RELIC_LICENSE_KEY}}"
          - name: PS_BASE_HOST
            value: "{{.Application_name}}-{{.Deploy.Name}}-{{.Build_id}}.{{.Namespace}}.svc.cluster.local"
          - name: NEW_RELIC_API_URL
            value: "{{.NEW_RELIC_API_URL}}"
          - name: NEW_RELIC_API_KEY_PASSWORD
            value: "{{.NEW_RELIC_API_KEY_PASSWORD}}"
        resources:
          requests:
            cpu: 100m
        ports:
        - containerPort: 80
          protocol: TCP
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
